/*
 *  This sketch sends data via HTTP GET requests to data.sparkfun.com service.
 *
 *  You need to get streamId and privateKey at data.sparkfun.com and paste them
 *  below. Or just customize this script to talk to other HTTP servers.
 *
 */

#define US_KEYBOARD 1
#include <Arduino.h>
#include <ArduinoJson.h>  // Install from IDE Library manager
#include <USB.h>

#include <BleHidBridge.h>
#include <UsbHidBridge.h>
#include <UsbhostCDC.hpp>

#include <WsKeyHub.h>
#include <WsHassioBridge.h>
#include <WsJsonIn.h>

#include <SysTools.h>
#include <SysSpiDisplay.h>

const char* ssid     = "WAP-IOT";
const char* password = "Pin#92109";
const int maxMessage = 512;
//USBCDC USBSerial;
uint8_t powerCmd[] = {0x01,0xA4,0x00,0xCE,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x07,0x65,0x01,0xA5,0x00,0x66,0x00,0x1A,0x11,0x7A,0x01,0xA5,0x00,0x66,0x00,0x1A,0x11,0x7A,0x01,0xA5,0x00,0x66,0x00,0x1A,0x11,0x7A,255,255}; 
uint8_t inputCmd[] = {0x01,0xA4,0x00,0xCE,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x17,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x00,0x4A,0x00,0x1A,0x07,0x65,0xFF,0xFF};

void irBridgeCallback(bool pStatus) {
  SysTools::addLog("***HELLO*** status: %i \n", pStatus);
    
    if(pStatus != true) return; 
    UsbhostCDC::controlDevice(&inputCmd[0], sizeof(inputCmd));
}

char* receivedKey(DynamicJsonDocument& pKeyObj){
  SysTools::addLog("receivedKey, keyWord: %s, keyModifier: %i, source: %s, location: %s", (const char *)pKeyObj["required"]["keyWord"], (int)pKeyObj["options"]["keyModifier"], (const char *)pKeyObj["source"], (const char *)pKeyObj["location"]);
  const char *keyWord = pKeyObj["required"]["keyWord"];
  int targetDevices = 0;
 
    if(pKeyObj["optional"]["targetDevices"] != nullptr) targetDevices = (int)pKeyObj["optional"]["targetDevices"];
    SysTools::addLog("receivedKey, targets: %i, useBleHub: %i, useUsbHub: %i, useWsHub: %i, WsDevice: %i", targetDevices, targetDevices & 1, targetDevices & 2, targetDevices & 4, targetDevices & 8);

//Bit Flags keyModifier High Word selects Bridge//
//bit0 0 Default
//bit1 1 BleHubBridge
//bit2 2 UsbHubBridge
//bit4 4 WsHubBridge
//bit8 8 WsDeviceBridge
  
    if(targetDevices == 0) BleHidBridge::controlDevice(pKeyObj); //default bridge
    if((targetDevices & 1) != 0) BleHidBridge::controlDevice(pKeyObj);
    if((targetDevices & 2) != 0) UsbHidBridge::controlDevice(pKeyObj);
    //if((targetDevices & 4) != 0) WsHubBridge::controlDevice(pKeyObj);
    if((targetDevices & 8) != 0) WsHassioBridge::controlDevice(pKeyObj);
    
    return "";
}

void setup()
{
    Serial.begin(115200);
    delay(4000);
     
    SysTools::addLog("%s", "Open BleHidBridge");
    BleHidBridge::openBridge("wsKeyboard-S3OTG");

    SysTools::addLog("%s", "Open WsHubBridge");
    WsKeyHub::open(receivedKey);

    SysTools::addLog("%s", "Enable SysSpiDisplay");
    SysSpiDisplay::enable(WsJsonIn::getConnectInfo());

    SysTools::addLog("%s", "Open WsDeviceBridge");
    WsHassioBridge::open(receivedKey);

    //SysTools::addLog("%s", "Open UsbHubBridge");
    //UsbHubBridge::openBridge();

    SysTools::addLog("%s", "Open UsbhostIrBridge");
    UsbhostCDC::open(&irBridgeCallback);

    //SysTools::addLog("%s", "Open UsbdeviceDrive");
    //UsbSD::open();

} //setup

void loop()
{
    WsKeyHub::refresh();
    WsHassioBridge::refresh();
    UsbhostCDC::refresh();
    SysSpiDisplay::refresh();
}
